
using .ObjectPrior:Object
using .Abstractors:UniteTouching

@testset "Unite touching" begin
    @testset "unite groups" begin
        task_data = Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                2 => [
                    Object([2], (1, 13)),
                    Object([-1 -1 -1 2 2 2 2 -1 2 2; 2 -1 2 2 2 2 2 2 2 -1; 2 2 2 2 2 2 -1 2 2 2; 2 2 2 2 2 2 2 -1 2 2; -1 2 2 -1 2 2 2 -1 2 -1; -1 -1 2 2 2 -1 -1 2 2 2; 2 -1 2 2 -1 -1 -1 2 2 2; 2 2 -1 2 2 -1 -1 -1 2 2; 2 2 2 2 -1 -1 -1 -1 2 2; 2 2 -1 2 -1 -1 -1 2 2 2], (1, 12)),
                    Object([2], (7, 17)),
                    Object([2; 2], (9, 17))
                ],
                8 => [
                    Object([8 8 8 8 8 -1 8 8 8; 8 -1 8 8 8 -1 8 -1 8; 8 -1 8 -1 8 -1 8 -1 8; 8 8 -1 8 8 8 8 8 8; 8 -1 -1 8 -1 8 -1 -1 8; -1 -1 -1 8 8 -1 -1 -1 8; 8 -1 8 8 8 8 8 8 -1; 8 8 8 -1 -1 -1 -1 8 8; 8 8 8 8 8 -1 -1 -1 -1; 8 8 8 8 8 8 -1 -1 -1], (1, 1)),
                    Object([8], (6, 2)),
                    Object([8], (9, 7)),
                    Object([8], (10, 8)),
                    Object([8 8 8 8 8 8 8 8 8; 8 8 8 8 8 -1 8 -1 8; 8 8 -1 -1 8 -1 8 8 8; 8 -1 8 -1 -1 -1 -1 8 8; -1 -1 8 -1 8 8 8 8 8; 8 -1 8 8 8 -1 8 8 -1; 8 8 8 8 8 -1 8 8 -1], (15, 1)),
                    Object([8 8 8 8 8 8 8 8; 8 8 8 8 8 -1 8 -1; -1 8 8 -1 8 8 -1 -1; 8 8 -1 8 8 -1 -1 -1; 8 -1 -1 8 8 8 -1 -1; -1 -1 -1 8 -1 8 -1 -1; -1 -1 -1 -1 -1 8 8 -1], (15, 12)),
                    Object([-1 8; 8 8; 8 8], (15, 20)),
                    Object([8], (18, 18)),
                    Object([8 -1 8; 8 8 8; -1 8 8], (19, 19)),
                    Object([8], (20, 13)),
                    Object([8], (21, 12)),
                    Object([8], (21, 14))
                ]
            ),
        )
        abstractor = UniteTouching("input|spatial_objects|grouped", true)
        @test abstractor(task_data) == Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                2 => [
                    Object([2], (1, 13)),
                    Object([-1 -1 -1 2 2 2 2 -1 2 2; 2 -1 2 2 2 2 2 2 2 -1; 2 2 2 2 2 2 -1 2 2 2; 2 2 2 2 2 2 2 -1 2 2; -1 2 2 -1 2 2 2 -1 2 -1; -1 -1 2 2 2 -1 -1 2 2 2; 2 -1 2 2 -1 -1 -1 2 2 2; 2 2 -1 2 2 -1 -1 -1 2 2; 2 2 2 2 -1 -1 -1 -1 2 2; 2 2 -1 2 -1 -1 -1 2 2 2], (1, 12)),
                    Object([2], (7, 17)),
                    Object([2; 2], (9, 17))
                ],
                8 => [
                    Object([8 8 8 8 8 -1 8 8 8; 8 -1 8 8 8 -1 8 -1 8; 8 -1 8 -1 8 -1 8 -1 8; 8 8 -1 8 8 8 8 8 8; 8 -1 -1 8 -1 8 -1 -1 8; -1 -1 -1 8 8 -1 -1 -1 8; 8 -1 8 8 8 8 8 8 -1; 8 8 8 -1 -1 -1 -1 8 8; 8 8 8 8 8 -1 -1 -1 -1; 8 8 8 8 8 8 -1 -1 -1], (1, 1)),
                    Object([8], (6, 2)),
                    Object([8], (9, 7)),
                    Object([8], (10, 8)),
                    Object([8 8 8 8 8 8 8 8 8; 8 8 8 8 8 -1 8 -1 8; 8 8 -1 -1 8 -1 8 8 8; 8 -1 8 -1 -1 -1 -1 8 8; -1 -1 8 -1 8 8 8 8 8; 8 -1 8 8 8 -1 8 8 -1; 8 8 8 8 8 -1 8 8 -1], (15, 1)),
                    Object([8 8 8 8 8 8 8 8; 8 8 8 8 8 -1 8 -1; -1 8 8 -1 8 8 -1 -1; 8 8 -1 8 8 -1 -1 -1; 8 -1 -1 8 8 8 -1 -1; -1 -1 -1 8 -1 8 -1 -1; -1 -1 -1 -1 -1 8 8 -1], (15, 12)),
                    Object([-1 8; 8 8; 8 8], (15, 20)),
                    Object([8], (18, 18)),
                    Object([8 -1 8; 8 8 8; -1 8 8], (19, 19)),
                    Object([8], (20, 13)),
                    Object([8], (21, 12)),
                    Object([8], (21, 14))
                ]
            ),
            "input|spatial_objects|grouped|united_touch" => Dict(
                2 => [
                    Object([-1 2 -1 2 2 2 2 -1 2 2; 2 -1 2 2 2 2 2 2 2 -1; 2 2 2 2 2 2 -1 2 2 2; 2 2 2 2 2 2 2 -1 2 2; -1 2 2 -1 2 2 2 -1 2 -1; -1 -1 2 2 2 -1 -1 2 2 2; 2 -1 2 2 -1 2 -1 2 2 2; 2 2 -1 2 2 -1 -1 -1 2 2; 2 2 2 2 -1 2 -1 -1 2 2; 2 2 -1 2 -1 2 -1 2 2 2], (1, 12))
                ],
                8 => [
                    Object([8 8 8 8 8 -1 8 8 8; 8 -1 8 8 8 -1 8 -1 8; 8 -1 8 -1 8 -1 8 -1 8; 8 8 -1 8 8 8 8 8 8; 8 -1 -1 8 -1 8 -1 -1 8; -1 8 -1 8 8 -1 -1 -1 8; 8 -1 8 8 8 8 8 8 -1; 8 8 8 -1 -1 -1 -1 8 8; 8 8 8 8 8 -1 8 -1 -1; 8 8 8 8 8 8 -1 8 -1], (1, 1)),
                    Object([8 8 8 8 8 8 8 8 8; 8 8 8 8 8 -1 8 -1 8; 8 8 -1 -1 8 -1 8 8 8; 8 -1 8 -1 -1 -1 -1 8 8; -1 -1 8 -1 8 8 8 8 8; 8 -1 8 8 8 -1 8 8 -1; 8 8 8 8 8 -1 8 8 -1], (15, 1)),
                    Object([8 8 8 8 8 8 8 8 -1 8; 8 8 8 8 8 -1 8 -1 8 8; -1 8 8 -1 8 8 -1 -1 8 8; 8 8 -1 8 8 -1 8 -1 -1 -1; 8 -1 -1 8 8 8 -1 8 -1 8; -1 8 -1 8 -1 8 -1 8 8 8; 8 -1 8 -1 -1 8 8 -1 8 8], (15, 12))
                ]
            )
        )
        task_data = Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                2 => [
                    Object([2 2 -1 -1 -1 -1; -1 2 -1 -1 -1 -1; 2 2 2 2 -1 -1; 2 2 2 -1 2 -1; 2 -1 -1 2 2 2; 2 2 2 2 2 -1; -1 2 -1 -1 2 2], (1, 1)),
                    Object([2], (1, 4)),
                    Object([-1 2; 2 2; -1 2], (1, 5)),
                    Object([2], (1, 12)),
                    Object([-1 -1 -1 2 2 2; -1 2 2 2 -1 -1; 2 2 2 2 -1 -1], (1, 12)),
                    Object([-1 2; 2 2], (2, 17)),
                    Object([-1 -1 -1 -1 2; -1 -1 -1 -1 2; -1 2 2 2 2; 2 2 -1 2 -1], (4, 12)),
                    Object([2; 2], (5, 18)),
                    Object([2], (7, 17)),
                    Object([2], (11, 1)),
                    Object([-1 -1 2 -1 -1 -1; -1 2 2 2 -1 -1; 2 2 2 2 -1 2; 2 2 -1 2 2 2; 2 2 2 2 2 2; 2 2 2 2 -1 2; -1 -1 2 2 2 -1; -1 -1 2 -1 2 2; -1 -1 2 -1 2 -1], (11, 1)),
                    Object([2], (11, 6)),
                    Object([2], (19, 1))
                ],
                3 => [
                    Object([-1 3 3 3 3; 3 3 3 3 -1; 3 3 3 -1 -1; 3 -1 -1 -1 -1; 3 -1 -1 -1 -1; 3 -1 -1 -1 -1], (11, 12)),
                    Object([3 3; 3 3], (12, 17)),
                    Object([3], (15, 14)),
                    Object([-1 -1 -1 -1 3 3 -1; -1 -1 -1 3 -1 3 3; -1 3 3 3 3 3 -1; 3 3 -1 3 -1 -1 -1; 3 -1 -1 3 3 3 -1], (15, 12)),
                    Object([3], (18, 18))
                ]
            )
        )
        @test abstractor(task_data) == Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                2 => [
                    Object([2 2 -1 -1 -1 -1; -1 2 -1 -1 -1 -1; 2 2 2 2 -1 -1; 2 2 2 -1 2 -1; 2 -1 -1 2 2 2; 2 2 2 2 2 -1; -1 2 -1 -1 2 2], (1, 1)),
                    Object([2], (1, 4)),
                    Object([-1 2; 2 2; -1 2], (1, 5)),
                    Object([2], (1, 12)),
                    Object([-1 -1 -1 2 2 2; -1 2 2 2 -1 -1; 2 2 2 2 -1 -1], (1, 12)),
                    Object([-1 2; 2 2], (2, 17)),
                    Object([-1 -1 -1 -1 2; -1 -1 -1 -1 2; -1 2 2 2 2; 2 2 -1 2 -1], (4, 12)),
                    Object([2; 2], (5, 18)),
                    Object([2], (7, 17)),
                    Object([2], (11, 1)),
                    Object([-1 -1 2 -1 -1 -1; -1 2 2 2 -1 -1; 2 2 2 2 -1 2; 2 2 -1 2 2 2; 2 2 2 2 2 2; 2 2 2 2 -1 2; -1 -1 2 2 2 -1; -1 -1 2 -1 2 2; -1 -1 2 -1 2 -1], (11, 1)),
                    Object([2], (11, 6)),
                    Object([2], (19, 1))
                ],
                3 => [
                    Object([-1 3 3 3 3; 3 3 3 3 -1; 3 3 3 -1 -1; 3 -1 -1 -1 -1; 3 -1 -1 -1 -1; 3 -1 -1 -1 -1], (11, 12)),
                    Object([3 3; 3 3], (12, 17)),
                    Object([3], (15, 14)),
                    Object([-1 -1 -1 -1 3 3 -1; -1 -1 -1 3 -1 3 3; -1 3 3 3 3 3 -1; 3 3 -1 3 -1 -1 -1; 3 -1 -1 3 3 3 -1], (15, 12)),
                    Object([3], (18, 18))
                ]
            ),
            "input|spatial_objects|grouped|united_touch" => Dict(
                2 => [
                    Object([2 2 -1 2 -1 2; -1 2 -1 -1 2 2; 2 2 2 2 -1 2; 2 2 2 -1 2 -1; 2 -1 -1 2 2 2; 2 2 2 2 2 -1; -1 2 -1 -1 2 2], (1, 1)),
                    Object([2 -1 -1 2 2 2 -1; -1 2 2 2 -1 -1 2; 2 2 2 2 -1 2 2; -1 -1 -1 -1 2 -1 -1; -1 -1 -1 -1 2 -1 2; -1 2 2 2 2 -1 2; 2 2 -1 2 -1 2 -1], (1, 12)),
                    Object([2 -1 2 -1 -1 -1; -1 2 2 2 -1 -1; 2 2 2 2 -1 2; 2 2 -1 2 2 2; 2 2 2 2 2 2; 2 2 2 2 -1 2; -1 -1 2 2 2 -1; -1 -1 2 -1 2 2; -1 -1 2 -1 2 -1], (11, 1)),
                    Object([2], (11, 6)),
                    Object([2], (19, 1))
                ],3 => [
                    Object([-1 3 3 3 3 -1 -1; 3 3 3 3 -1 3 3; 3 3 3 -1 -1 3 3; 3 -1 -1 -1 -1 -1 -1; 3 -1 3 -1 3 3 -1; 3 -1 -1 3 -1 3 3; -1 3 3 3 3 3 -1; 3 3 -1 3 -1 -1 3; 3 -1 -1 3 3 3 -1], (11, 12))
                ]
            )
        )
        next_abstrractor = UniteTouching("input|spatial_objects|grouped|united_touch", true)
        @test next_abstrractor(abstractor(task_data)) == Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                2 => [
                    Object([2 2 -1 -1 -1 -1; -1 2 -1 -1 -1 -1; 2 2 2 2 -1 -1; 2 2 2 -1 2 -1; 2 -1 -1 2 2 2; 2 2 2 2 2 -1; -1 2 -1 -1 2 2], (1, 1)),
                    Object([2], (1, 4)),
                    Object([-1 2; 2 2; -1 2], (1, 5)),
                    Object([2], (1, 12)),
                    Object([-1 -1 -1 2 2 2; -1 2 2 2 -1 -1; 2 2 2 2 -1 -1], (1, 12)),
                    Object([-1 2; 2 2], (2, 17)),
                    Object([-1 -1 -1 -1 2; -1 -1 -1 -1 2; -1 2 2 2 2; 2 2 -1 2 -1], (4, 12)),
                    Object([2; 2], (5, 18)),
                    Object([2], (7, 17)),
                    Object([2], (11, 1)),
                    Object([-1 -1 2 -1 -1 -1; -1 2 2 2 -1 -1; 2 2 2 2 -1 2; 2 2 -1 2 2 2; 2 2 2 2 2 2; 2 2 2 2 -1 2; -1 -1 2 2 2 -1; -1 -1 2 -1 2 2; -1 -1 2 -1 2 -1], (11, 1)),
                    Object([2], (11, 6)),
                    Object([2], (19, 1))
                ],
                3 => [
                    Object([-1 3 3 3 3; 3 3 3 3 -1; 3 3 3 -1 -1; 3 -1 -1 -1 -1; 3 -1 -1 -1 -1; 3 -1 -1 -1 -1], (11, 12)),
                    Object([3 3; 3 3], (12, 17)),
                    Object([3], (15, 14)),
                    Object([-1 -1 -1 -1 3 3 -1; -1 -1 -1 3 -1 3 3; -1 3 3 3 3 3 -1; 3 3 -1 3 -1 -1 -1; 3 -1 -1 3 3 3 -1], (15, 12)),
                    Object([3], (18, 18))
                ]
            ),
            "input|spatial_objects|grouped|united_touch" => Dict(
                2 => [
                    Object([2 2 -1 2 -1 2; -1 2 -1 -1 2 2; 2 2 2 2 -1 2; 2 2 2 -1 2 -1; 2 -1 -1 2 2 2; 2 2 2 2 2 -1; -1 2 -1 -1 2 2], (1, 1)),
                    Object([2 -1 -1 2 2 2 -1; -1 2 2 2 -1 -1 2; 2 2 2 2 -1 2 2; -1 -1 -1 -1 2 -1 -1; -1 -1 -1 -1 2 -1 2; -1 2 2 2 2 -1 2; 2 2 -1 2 -1 2 -1], (1, 12)),
                    Object([2 -1 2 -1 -1 -1; -1 2 2 2 -1 -1; 2 2 2 2 -1 2; 2 2 -1 2 2 2; 2 2 2 2 2 2; 2 2 2 2 -1 2; -1 -1 2 2 2 -1; -1 -1 2 -1 2 2; -1 -1 2 -1 2 -1], (11, 1)),
                    Object([2], (11, 6)),
                    Object([2], (19, 1))
                ],3 => [
                    Object([-1 3 3 3 3 -1 -1; 3 3 3 3 -1 3 3; 3 3 3 -1 -1 3 3; 3 -1 -1 -1 -1 -1 -1; 3 -1 3 -1 3 3 -1; 3 -1 -1 3 -1 3 3; -1 3 3 3 3 3 -1; 3 3 -1 3 -1 -1 3; 3 -1 -1 3 3 3 -1], (11, 12))
                ]
            ),
            "input|spatial_objects|grouped|united_touch|united_touch" => Dict(
                2 => [
                    Object([2 2 -1 2 -1 2; -1 2 -1 -1 2 2; 2 2 2 2 -1 2; 2 2 2 -1 2 -1; 2 -1 -1 2 2 2; 2 2 2 2 2 -1; -1 2 -1 -1 2 2], (1, 1)),
                    Object([2 -1 -1 2 2 2 -1; -1 2 2 2 -1 -1 2; 2 2 2 2 -1 2 2; -1 -1 -1 -1 2 -1 -1; -1 -1 -1 -1 2 -1 2; -1 2 2 2 2 -1 2; 2 2 -1 2 -1 2 -1], (1, 12)),
                    Object([2 -1 2 -1 -1 -1; -1 2 2 2 -1 -1; 2 2 2 2 -1 2; 2 2 -1 2 2 2; 2 2 2 2 2 2; 2 2 2 2 -1 2; -1 -1 2 2 2 -1; -1 -1 2 -1 2 2; -1 -1 2 -1 2 -1], (11, 1)),
                    Object([2], (11, 6)),
                    Object([2], (19, 1))
                ],3 => [
                    Object([-1 3 3 3 3 -1 -1; 3 3 3 3 -1 3 3; 3 3 3 -1 -1 3 3; 3 -1 -1 -1 -1 -1 -1; 3 -1 3 -1 3 3 -1; 3 -1 -1 3 -1 3 3; -1 3 3 3 3 3 -1; 3 3 -1 3 -1 -1 3; 3 -1 -1 3 3 3 -1], (11, 12))
                ]
            )
        )
        task_data = Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                4 => [
                    Object([4 4 4 -1 4 -1 -1 -1 4; -1 4 -1 4 4 4 4 4 4; -1 4 4 4 4 4 4 -1 -1; 4 4 -1 4 -1 4 4 -1 -1; -1 -1 -1 4 4 4 -1 -1 -1; -1 -1 -1 -1 4 -1 -1 -1 -1], (1, 11)),
                    Object([4], (4, 19)),
                    Object([4 4 4], (6, 11)),
                    Object([4], (6, 17)),
                    Object([4], (6, 19))
                ],
                1 => [
                    Object([1 1 1 -1 -1 -1; -1 1 1 1 -1 -1; -1 -1 -1 1 -1 -1; -1 -1 -1 1 1 1; -1 -1 -1 -1 -1 1], (1, 2)),
                    Object([1], (1, 6)),
                    Object([1], (2, 1)),
                    Object([1], (3, 2)),
                    Object([1; 1; 1], (4, 1)),
                    Object([1 -1; 1 1; -1 1], (4, 3)),
                    Object([1 1 1 1 1 1 1; 1 1 1 1 1 1 1; -1 1 1 -1 -1 -1 1; 1 1 1 1 -1 -1 -1; -1 1 1 1 -1 1 -1; -1 1 1 1 1 1 1; -1 -1 -1 1 1 1 -1; -1 1 1 1 1 1 -1; -1 1 1 1 -1 1 1], (9, 1)),
                    Object([1 1], (9, 11)),
                    Object([-1 -1 -1 1 1 -1 -1 -1 -1; -1 -1 1 1 1 1 1 -1 -1; -1 1 -1 -1 1 -1 -1 -1 -1; 1 1 -1 -1 1 -1 -1 -1 -1; 1 1 1 1 1 -1 -1 -1 -1; 1 1 1 -1 1 -1 1 -1 1; 1 1 1 1 1 1 1 1 1; 1 1 1 -1 1 1 1 -1 1; 1 -1 1 1 -1 1 -1 -1 -1], (9, 11)),
                    Object([-1 1 1; -1 -1 1; -1 1 1; 1 1 -1; -1 1 -1], (9, 17)),
                    Object([1], (17, 18))
                ]
            )
        )
        @test abstractor(task_data) == Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                4 => [
                    Object([4 4 4 -1 4 -1 -1 -1 4; -1 4 -1 4 4 4 4 4 4; -1 4 4 4 4 4 4 -1 -1; 4 4 -1 4 -1 4 4 -1 -1; -1 -1 -1 4 4 4 -1 -1 -1; -1 -1 -1 -1 4 -1 -1 -1 -1], (1, 11)),
                    Object([4], (4, 19)),
                    Object([4 4 4], (6, 11)),
                    Object([4], (6, 17)),
                    Object([4], (6, 19))
                ],
                1 => [
                    Object([1 1 1 -1 -1 -1; -1 1 1 1 -1 -1; -1 -1 -1 1 -1 -1; -1 -1 -1 1 1 1; -1 -1 -1 -1 -1 1], (1, 2)),
                    Object([1], (1, 6)),
                    Object([1], (2, 1)),
                    Object([1], (3, 2)),
                    Object([1; 1; 1], (4, 1)),
                    Object([1 -1; 1 1; -1 1], (4, 3)),
                    Object([1 1 1 1 1 1 1; 1 1 1 1 1 1 1; -1 1 1 -1 -1 -1 1; 1 1 1 1 -1 -1 -1; -1 1 1 1 -1 1 -1; -1 1 1 1 1 1 1; -1 -1 -1 1 1 1 -1; -1 1 1 1 1 1 -1; -1 1 1 1 -1 1 1], (9, 1)),
                    Object([1 1], (9, 11)),
                    Object([-1 -1 -1 1 1 -1 -1 -1 -1; -1 -1 1 1 1 1 1 -1 -1; -1 1 -1 -1 1 -1 -1 -1 -1; 1 1 -1 -1 1 -1 -1 -1 -1; 1 1 1 1 1 -1 -1 -1 -1; 1 1 1 -1 1 -1 1 -1 1; 1 1 1 1 1 1 1 1 1; 1 1 1 -1 1 1 1 -1 1; 1 -1 1 1 -1 1 -1 -1 -1], (9, 11)),
                    Object([-1 1 1; -1 -1 1; -1 1 1; 1 1 -1; -1 1 -1], (9, 17)),
                    Object([1], (17, 18))
                ]
            ),
            "input|spatial_objects|grouped|united_touch" => Dict(
                4 => [
                    Object([4 4 4 -1 4 -1 -1 -1 4; -1 4 -1 4 4 4 4 4 4; -1 4 4 4 4 4 4 -1 -1; 4 4 -1 4 -1 4 4 -1 -1; -1 -1 -1 4 4 4 -1 -1 -1; 4 4 4 -1 4 -1 4 -1 -1], (1, 11)),
                    Object([4], (4, 19)),
                    Object([4], (6, 19))
                ],
                1 => [
                    Object([-1 1 1 1 -1 1 -1; 1 -1 1 1 1 -1 -1; -1 1 -1 -1 1 -1 -1; 1 -1 1 -1 1 1 1; 1 -1 1 1 -1 -1 1; 1 -1 -1 1 -1 -1 -1], (1, 1)),
                    Object([1 1 1 1 1 1 1; 1 1 1 1 1 1 1; -1 1 1 -1 -1 -1 1; 1 1 1 1 -1 -1 -1; -1 1 1 1 -1 1 -1; -1 1 1 1 1 1 1; -1 -1 -1 1 1 1 -1; -1 1 1 1 1 1 -1; -1 1 1 1 -1 1 1], (9, 1)),
                    Object([1 1 -1 1 1 -1 -1 1 1; -1 -1 1 1 1 1 1 -1 1; -1 1 -1 -1 1 -1 -1 1 1; 1 1 -1 -1 1 -1 1 1 -1; 1 1 1 1 1 -1 -1 1 -1; 1 1 1 -1 1 -1 1 -1 1; 1 1 1 1 1 1 1 1 1; 1 1 1 -1 1 1 1 -1 1; 1 -1 1 1 -1 1 -1 1 -1], (9, 11))
                ]
            )
        )
        @test next_abstrractor(abstractor(task_data)) == Dict(
            "input|spatial_objects|grouped" => Dict{Any,Any}(
                4 => [
                    Object([4 4 4 -1 4 -1 -1 -1 4; -1 4 -1 4 4 4 4 4 4; -1 4 4 4 4 4 4 -1 -1; 4 4 -1 4 -1 4 4 -1 -1; -1 -1 -1 4 4 4 -1 -1 -1; -1 -1 -1 -1 4 -1 -1 -1 -1], (1, 11)),
                    Object([4], (4, 19)),
                    Object([4 4 4], (6, 11)),
                    Object([4], (6, 17)),
                    Object([4], (6, 19))
                ],
                1 => [
                    Object([1 1 1 -1 -1 -1; -1 1 1 1 -1 -1; -1 -1 -1 1 -1 -1; -1 -1 -1 1 1 1; -1 -1 -1 -1 -1 1], (1, 2)),
                    Object([1], (1, 6)),
                    Object([1], (2, 1)),
                    Object([1], (3, 2)),
                    Object([1; 1; 1], (4, 1)),
                    Object([1 -1; 1 1; -1 1], (4, 3)),
                    Object([1 1 1 1 1 1 1; 1 1 1 1 1 1 1; -1 1 1 -1 -1 -1 1; 1 1 1 1 -1 -1 -1; -1 1 1 1 -1 1 -1; -1 1 1 1 1 1 1; -1 -1 -1 1 1 1 -1; -1 1 1 1 1 1 -1; -1 1 1 1 -1 1 1], (9, 1)),
                    Object([1 1], (9, 11)),
                    Object([-1 -1 -1 1 1 -1 -1 -1 -1; -1 -1 1 1 1 1 1 -1 -1; -1 1 -1 -1 1 -1 -1 -1 -1; 1 1 -1 -1 1 -1 -1 -1 -1; 1 1 1 1 1 -1 -1 -1 -1; 1 1 1 -1 1 -1 1 -1 1; 1 1 1 1 1 1 1 1 1; 1 1 1 -1 1 1 1 -1 1; 1 -1 1 1 -1 1 -1 -1 -1], (9, 11)),
                    Object([-1 1 1; -1 -1 1; -1 1 1; 1 1 -1; -1 1 -1], (9, 17)),
                    Object([1], (17, 18))
                ]
            ),
            "input|spatial_objects|grouped|united_touch" => Dict(
                4 => [
                    Object([4 4 4 -1 4 -1 -1 -1 4; -1 4 -1 4 4 4 4 4 4; -1 4 4 4 4 4 4 -1 -1; 4 4 -1 4 -1 4 4 -1 -1; -1 -1 -1 4 4 4 -1 -1 -1; 4 4 4 -1 4 -1 4 -1 -1], (1, 11)),
                    Object([4], (4, 19)),
                    Object([4], (6, 19))
                ],
                1 => [
                    Object([-1 1 1 1 -1 1 -1; 1 -1 1 1 1 -1 -1; -1 1 -1 -1 1 -1 -1; 1 -1 1 -1 1 1 1; 1 -1 1 1 -1 -1 1; 1 -1 -1 1 -1 -1 -1], (1, 1)),
                    Object([1 1 1 1 1 1 1; 1 1 1 1 1 1 1; -1 1 1 -1 -1 -1 1; 1 1 1 1 -1 -1 -1; -1 1 1 1 -1 1 -1; -1 1 1 1 1 1 1; -1 -1 -1 1 1 1 -1; -1 1 1 1 1 1 -1; -1 1 1 1 -1 1 1], (9, 1)),
                    Object([1 1 -1 1 1 -1 -1 1 1; -1 -1 1 1 1 1 1 -1 1; -1 1 -1 -1 1 -1 -1 1 1; 1 1 -1 -1 1 -1 1 1 -1; 1 1 1 1 1 -1 -1 1 -1; 1 1 1 -1 1 -1 1 -1 1; 1 1 1 1 1 1 1 1 1; 1 1 1 -1 1 1 1 -1 1; 1 -1 1 1 -1 1 -1 1 -1], (9, 11))
                ]
            ),
            "input|spatial_objects|grouped|united_touch|united_touch" => Dict(
                4 => [
                    Object([4 4 4 -1 4 -1 -1 -1 4; -1 4 -1 4 4 4 4 4 4; -1 4 4 4 4 4 4 -1 -1; 4 4 -1 4 -1 4 4 -1 -1; -1 -1 -1 4 4 4 -1 -1 -1; 4 4 4 -1 4 -1 4 -1 -1], (1, 11)),
                    Object([4], (4, 19)),
                    Object([4], (6, 19))
                ],
                1 => [
                    Object([-1 1 1 1 -1 1 -1; 1 -1 1 1 1 -1 -1; -1 1 -1 -1 1 -1 -1; 1 -1 1 -1 1 1 1; 1 -1 1 1 -1 -1 1; 1 -1 -1 1 -1 -1 -1], (1, 1)),
                    Object([1 1 1 1 1 1 1; 1 1 1 1 1 1 1; -1 1 1 -1 -1 -1 1; 1 1 1 1 -1 -1 -1; -1 1 1 1 -1 1 -1; -1 1 1 1 1 1 1; -1 -1 -1 1 1 1 -1; -1 1 1 1 1 1 -1; -1 1 1 1 -1 1 1], (9, 1)),
                    Object([1 1 -1 1 1 -1 -1 1 1; -1 -1 1 1 1 1 1 -1 1; -1 1 -1 -1 1 -1 -1 1 1; 1 1 -1 -1 1 -1 1 1 -1; 1 1 1 1 1 -1 -1 1 -1; 1 1 1 -1 1 -1 1 -1 1; 1 1 1 1 1 1 1 1 1; 1 1 1 -1 1 1 1 -1 1; 1 -1 1 1 -1 1 -1 1 -1], (9, 11))
                ]
            )
        )
    end
end
